generator client {
  provider = "prisma-client-js"
  previewFeatures = ["tracing", "metrics"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model User {
    id                      Int             @id @default(autoincrement())
    userId                  String          @unique
    roleId                  Int
    username                String          @unique
    password                String
    email                   String
    lastActivityDate        DateTime?       @db.Timestamp(6)
    createdAt               DateTime        @default(now()) @db.Timestamp(6)
    updatedAt               DateTime        @updatedAt @db.Timestamp(6)

    // Table inheritance
    admin                   Admin?           
    lecturer                Lecturer?
    student                 Student?

    // Data
    refreshToken            RefreshToken?   
    role                    Role            @relation(fields: [roleId], references: [id], onUpdate: Cascade)
    sentNotifications       Notification[]
    receivedNotifications   Notification[]  @relation("usersReceivedNotifications")

    // Workflow engine
    createdRequests         Request[]
    engagedRequests         Request[]       @relation("requestStakeholders")
    requestNotes            RequestNote[]
    requestFiles            RequestFile[]
    groups                  Group[]
}

model RefreshToken {
    id      Int         @id @default(autoincrement())
    userId  String      @unique
    token   String      @db.VarChar(255)
    exp     DateTime    @db.Timestamp(6)

    user    User        @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
}

model Role {
    id              Int         @id @default(autoincrement())
    name            String      @unique
    description     String?
    createdAt       DateTime    @default(now()) @db.Timestamp(6)
    updatedAt       DateTime    @updatedAt @db.Timestamp(6)
    
    users           User[]
}

model Notification {
    id          Int         @id @default(autoincrement())
    senderId    String?
    title       String?     @db.VarChar(255)
    content     String?     @db.VarChar(2000)
    isRead      Boolean     @default(false)
    createdAt   DateTime    @default(now()) @db.Timestamp(6)
    updatedAt   DateTime    @updatedAt @db.Timestamp(6)

    sender      User?       @relation(fields: [senderId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    receivers   User[]      @relation("usersReceivedNotifications")
}

model Admin {
    id                            Int                           @id @default(autoincrement())
    userId                        String                        @unique
    contact                       String?                       @db.VarChar(255)
    title                         String?                       @db.VarChar(255)
    signature                     String?                       @db.VarChar(255)

    user                          User                          @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)                        
    bachelorThesisRegistrations   BachelorThesisRegistration[]
    oralDefenseRegistrations      OralDefenseRegistration[]
}

model Lecturer {
    id                               Int                             @id @default(autoincrement())
    userId                           String                          @unique
    title                            String?                         @db.VarChar(255)
    numberOfTheses                   Int                             @default(0)
    bio                              String?                         @db.Text
    signature                        String?                         @db.VarChar(255)

    user                             User                            @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    createdTheses                    Thesis[]
    sup1BachelorThesisRegistrations  BachelorThesisRegistration[]    @relation("supervisor1BachelorThesisRegistrations")
    sup2BachelorThesisRegistrations  BachelorThesisRegistration[]    @relation("supervisor2BachelorThesisRegistrations")
    supBachelorThesisEvaluations     BachelorThesisEvaluation[]      @relation("supervisorBachelorThesisEvaluations")
    sup1OralDefenseRegistrations     OralDefenseRegistration[]       @relation("supervisor1OralDefenseRegistrations")
    sup2OralDefenseRegistrations     OralDefenseRegistration[]       @relation("supervisor2OralDefenseRegistrations")
    sup1BachelorThesisAssessments    BachelorThesisAssessment[]      @relation("supervisor1BachelorThesisAssessments")
    sup2BachelorThesisAssessments    BachelorThesisAssessment[]      @relation("supervisor2BachelorThesisAssessments")
    sup1OralDefenseAssessments       OralDefenseAssessment[]         @relation("supervisor1OralDefenseAssessments")
    sup2OralDefenseAssessments       OralDefenseAssessment[]         @relation("supervisor2OralDefenseAssessments")
}

model Program {
    id              Int         @id @default(autoincrement())
    title           String      @unique @db.VarChar(255)
    description     String?     @db.VarChar(2000)
    createdAt       DateTime    @default(now()) @db.Timestamp(6)
    updatedAt       DateTime    @updatedAt @db.Timestamp(6)

    students        Student[]
}

model Student {
    id                            Int                             @id @default(autoincrement())
    userId                        String                          @unique
    programId                     Int?
    surname                       String?                         @db.VarChar(255)
    forename                      String?                         @db.VarChar(255)                            
    intake                        Int?
    ects                          Int                             @default(0)
    signature                     String?                         @db.VarChar(255)

    user                          User                            @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    program                       Program?                        @relation(fields: [programId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    bachelorThesisRegistration    BachelorThesisRegistration?
    oralDefenseRegistration       OralDefenseRegistration?
    bachelorThesisAssessment      BachelorThesisAssessment?
    oralDefenseAssessment         OralDefenseAssessment?
    bachelorThesisEvaluation      BachelorThesisEvaluation?
}

model Topic {
    id              Int         @id @default(autoincrement())
    title           String      @db.VarChar(255)
    description     String?     @db.Text
    createdAt       DateTime    @default(now()) @db.Timestamp(6)
    updatedAt       DateTime    @updatedAt @db.Timestamp(6)

    theses          Thesis[]
}

model Field {
    id              Int         @id @default(autoincrement())
    title           String      @db.VarChar(255)
    description     String?     @db.Text
    createdAt       DateTime    @default(now()) @db.Timestamp(6)
    updatedAt       DateTime    @updatedAt @db.Timestamp(6)

    theses          Thesis[]
}
        
model Thesis {
    id                            Int                                 @id @default(autoincrement())
    topicId                       Int?
    fieldId                       Int?
    creatorId                     String
    title                         String?                             @db.VarChar(255)       
    slot                          Int                                 @default(0)
    slotLimit                     Int?                                @default(2)
    activateRegistration          Boolean                             @default(false)
    activateDefense               Boolean                             @default(false)
    submissionDeadline            DateTime?                           @db.DateTime
    numberHardCopies              Int?                
    printRequirements             String?                             @db.VarChar(255)
    templateFiles                 String?                             @db.VarChar(255)
    createdAt                     DateTime                            @default(now()) @db.Timestamp(6)
    updatedAt                     DateTime                            @updatedAt @db.Timestamp(6)

    topic                         Topic?                              @relation(fields: [topicId], references: [id])
    field                         Field?                              @relation(fields: [fieldId], references: [id])
    creator                       Lecturer                            @relation(fields: [creatorId], references: [userId])
    bachelorThesisRegistrations   BachelorThesisRegistration[]
    oralDefenseRegistrations      OralDefenseRegistration[]
    bachelorThesisAssessments     BachelorThesisAssessment[]
    oralDefenseAssessments        OralDefenseAssessment[]
    bachelorThesisEvaluations     BachelorThesisEvaluation[]
}

model Location {
    id                  Int             @id @default(autoincrement())
    title               String          @db.VarChar(255)
    description         String?         @db.Text
    createdAt           DateTime        @default(now()) @db.Timestamp(6)
    updatedAt           DateTime        @updatedAt @db.Timestamp(6)
}

model BachelorThesisRegistration {
    id                      Int         @id @default(autoincrement())
    thesisId                Int
    studentId               String      @unique
    supervisor1Id           String?
    supervisor2Id           String?
    adminId                 String?
    dateOfBirth             DateTime?   @db.Date
    placeOfBirth            String?     @db.VarChar(255)
    studentDate             DateTime?   @db.Date
    furtherParticipants     String?     @db.VarChar(255)
    supervisor1Date         DateTime?   @db.Date
    supervisor1Confirmed    Boolean?    
    supervisor2Date         DateTime?   @db.Date
    supervisor2Confirmed    Boolean?
    adminConfirmed          Boolean?
    adminAllowed            Boolean?    
    issued                  DateTime?   @db.Date
    deadlineCopy            DateTime?   @db.Date
    extensionGranted        DateTime?   @db.Date
    chairmanOfExamination   String?     @db.VarChar(255)
    dateOfIssue             DateTime?   @db.Date
    createdAt               DateTime    @default(now()) @db.Timestamp(6)
    updatedAt               DateTime    @updatedAt @db.Timestamp(6)

    student                 Student     @relation(fields: [studentId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    thesis                  Thesis      @relation(fields: [thesisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    supervisor1             Lecturer?   @relation("supervisor1BachelorThesisRegistrations", fields: [supervisor1Id], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    supervisor2             Lecturer?   @relation("supervisor2BachelorThesisRegistrations", fields: [supervisor2Id], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    admin                   Admin?      @relation(fields: [adminId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

model OralDefenseRegistration {
    id                     Int         @id @default(autoincrement())
    studentId              String      @unique
    thesisId               Int
    supervisor1Id          String?
    supervisor2Id          String?
    adminId                String?
    room                   String?     @db.VarChar(255)
    areSpectatorsAllowed   Boolean?    
    proposedDate           DateTime?   @db.DateTime
    actualDate             DateTime?   @db.DateTime
    concernedAgreed        Int?        @default(0)
    dateReceived           DateTime?   @db.DateTime
    admissionDate          DateTime?   @db.DateTime
    adminAllowed           Boolean?
    createdAt              DateTime    @default(now()) @db.Timestamp(6)
    updatedAt              DateTime    @updatedAt @db.Timestamp(6)

    student                Student     @relation(fields: [studentId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    thesis                 Thesis      @relation(fields: [thesisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    supervisor1            Lecturer?   @relation("supervisor1OralDefenseRegistrations", fields: [supervisor1Id], references: [userId], onDelete: SetNull, onUpdate: Cascade)
    supervisor2            Lecturer?   @relation("supervisor2OralDefenseRegistrations", fields: [supervisor2Id], references: [userId], onDelete: SetNull, onUpdate: Cascade)
    admin                  Admin?      @relation(fields: [adminId], references: [userId], onDelete: SetNull, onUpdate: Cascade)
}

model BachelorThesisAssessment {
    id                     Int         @id @default(autoincrement())
    studentId              String      @unique
    thesisId               Int
    supervisor1Id          String?
    supervisor2Id          String?
    furtherParticipants    String?     @db.VarChar(255)
    supervisor1Grade       Float?      @db.Float
    supervisor2Grade       Float?      @db.Float
    assessmentDescription  String?     @db.VarChar(255)
    assessmentDate         DateTime?   @db.Date
    createdAt              DateTime    @default(now()) @db.Timestamp(6)
    updatedAt              DateTime    @updatedAt @db.Timestamp(6)

    student                Student     @relation(fields: [studentId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    thesis                 Thesis      @relation(fields: [thesisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    supervisor1            Lecturer?   @relation("supervisor1BachelorThesisAssessments", fields: [supervisor1Id], references: [userId], onDelete: SetNull, onUpdate: Cascade)
    supervisor2            Lecturer?   @relation("supervisor2BachelorThesisAssessments", fields: [supervisor2Id], references: [userId], onDelete: SetNull, onUpdate: Cascade)
}

model OralDefenseAssessment {
    id                     Int         @id @default(autoincrement())
    studentId              String      @unique
    thesisId               Int
    supervisor1Id          String?
    supervisor2Id          String?
    dateDefense            DateTime?   @db.Date
    placeDefense           String?     @db.VarChar(255)
    startDate              DateTime?   @db.Date
    finishDate             DateTime?   @db.Date
    stateOfHealth          Boolean?
    supervisor1Grade       Float?      @db.Float
    supervisor2Grade       Float?      @db.Float
    record                 String?     @db.VarChar(2000)
    assessmentDate         DateTime?   @db.Date
    createdAt              DateTime    @default(now()) @db.Timestamp(6)
    updatedAt              DateTime    @updatedAt @db.Timestamp(6)

    student                Student     @relation(fields: [studentId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    thesis                 Thesis      @relation(fields: [thesisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    supervisor1            Lecturer?   @relation("supervisor1OralDefenseAssessments", fields: [supervisor1Id], references: [userId], onDelete: SetNull, onUpdate: Cascade)
    supervisor2            Lecturer?   @relation("supervisor2OralDefenseAssessments", fields: [supervisor2Id], references: [userId], onDelete: SetNull, onUpdate: Cascade)
}

model BachelorThesisEvaluation {
    id                      Int         @id @default(autoincrement())
    thesisId                Int
    studentId               String      @unique
    supervisorId            String
    title                   String?     @db.VarChar(255)
    date                    DateTime?   @db.Date
    supervisorConfirmed     Boolean?    
    createdAt               DateTime    @default(now()) @db.Timestamp(6)
    updatedAt               DateTime    @updatedAt @db.Timestamp(6)

    student                 Student     @relation(fields: [studentId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    thesis                  Thesis      @relation(fields: [thesisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    supervisor              Lecturer    @relation("supervisorBachelorThesisEvaluations", fields: [supervisorId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

///
/// The following tables are to construct a workflow engine database
/// See: https://exceptionnotfound.net/designing-a-workflow-engine-database-part-1-introduction-and-purpose/
///
/// Note: ProcessAdmin table is not adopted as the the system does not require this concept for now 
///
model Process {
    id              String      @id @default(cuid())
    name            String      @unique
    description     String?     @db.VarChar(2000)

    states          State[]
    transitions     Transition[]
    actions         Action[]
    activities      Activity[]
    groups          Group[]
    requests        Request[]
}

model Request {
    id                  String          @id @default(cuid())
    processId           String
    userId              String
    stateId             String
    title               String          @db.VarChar(255)
    createdAt           DateTime        @default(now()) @db.Timestamp(6)
    updatedAt           DateTime        @updatedAt @db.Timestamp(6)

    data                RequestData[]
    notes               RequestNote[]
    files               RequestFile[]

    process             Process         @relation(fields: [processId], references: [id], onUpdate: Cascade)
    creator             User            @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    stakeholders        User[]          @relation("requestStakeholders")
    state               State           @relation(fields: [stateId], references: [id], onUpdate: Cascade)
    requestActions      RequestAction[]
}

model RequestData {
    id              String      @id @default(cuid())
    requestId       String
    name            String
    value           String      @db.Text
    createdAt       DateTime    @default(now()) @db.Timestamp(6)
    updatedAt       DateTime    @updatedAt @db.Timestamp(6)

    request         Request     @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([requestId, name])
}

model RequestNote {
    id              String      @id @default(cuid())
    requestId       String
    userId          String
    note            String      @db.Text
    createdAt       DateTime    @default(now()) @db.Timestamp(6)
    updatedAt       DateTime    @updatedAt @db.Timestamp(6)

    request         Request     @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user            User        @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

model RequestFile {
    id              String      @id @default(cuid())
    requestId       String
    userId          String
    name            String
    path            String
    mimeType        String
    createdAt       DateTime    @default(now()) @db.Timestamp(6)
    updatedAt       DateTime    @updatedAt @db.Timestamp(6)

    request         Request     @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user            User        @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

    @@unique([requestId, name, path])
}

model StateType {
    id          String      @id @default(cuid())
    name        String      @unique

    states      State[]
}

model State {
    id              String          @id @default(cuid())
    processId       String
    stateTypeId     String
    name            String
    description     String?         @db.VarChar(2000)

    process         Process         @relation(fields: [processId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stateType       StateType       @relation(fields: [stateTypeId], references: [id], onUpdate: Cascade)
    outTransitions  Transition[]    @relation("currentStateTransitions")
    inTransitions   Transition[]    @relation("nextStateTransitions")
    activities      Activity[]
    requests        Request[]
}

model Transition {
    id              String      @id @default(cuid())
    processId       String
    currentStateId  String
    nextStateId     String

    process         Process     @relation(fields: [processId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    currentState    State       @relation("currentStateTransitions", fields: [currentStateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    nextState       State       @relation("nextStateTransitions", fields: [nextStateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    actions         Action[]
    activities      Activity[]
    requestActions  RequestAction[]
}

model ActionType {
    id          String      @id @default(cuid())
    name        String      @unique

    actions     Action[]
}

model Action {
    id                  String          @id @default(cuid())
    processId           String
    actionTypeId        String
    name                String
    description         String?         @db.VarChar(2000)

    process             Process         @relation(fields: [processId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    actionType          ActionType      @relation(fields: [actionTypeId], references: [id], onUpdate: Cascade)
    transitions         Transition[]
    actionTargets       ActionTarget[]
    requestActions      RequestAction[]
}

model ActivityType {
    id              String      @id @default(cuid())
    name            String      @unique

    activities      Activity[]
}

model Activity {
    id                  String          @id @default(cuid())
    processId           String
    activityTypeId      String
    name                String
    description         String?         @db.VarChar(2000)

    process             Process         @relation(fields: [processId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    activityType        ActivityType    @relation(fields: [activityTypeId], references: [id], onUpdate: Cascade)
    states              State[]
    transitions         Transition[]
    activityTargets     ActivityTarget[]
}

model Group {
    id                  String          @id @default(cuid())
    processId           String
    name                String
    description         String?         @db.VarChar(2000)

    process             Process         @relation(fields: [processId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    users               User[]
}

model Target {
    id                  String              @id @default(cuid())
    name                String              @unique
    description         String?             @db.VarChar(2000)

    actionTargets       ActionTarget[]
    activityTargets     ActivityTarget[]
}

model ActionTarget {
    id              String      @id @default(cuid())
    actionId        String
    targetId        String

    action          Action      @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    target          Target      @relation(fields: [targetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ActivityTarget {
    id              String      @id @default(cuid())
    activityId      String
    targetId        String

    activity        Activity    @relation(fields: [activityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    target          Target      @relation(fields: [targetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RequestAction {
    id              String          @id @default(cuid())
    requestId       String
    actionId        String
    transitionId    String
    isActive        Boolean         @default(true)
    isCompleted     Boolean         @default(false)
    createdAt       DateTime        @default(now()) @db.Timestamp(6)
    updatedAt       DateTime        @updatedAt @db.Timestamp(6)

    request         Request         @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    action          Action          @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    transition      Transition      @relation(fields: [transitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}